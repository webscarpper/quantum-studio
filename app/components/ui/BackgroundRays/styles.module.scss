.rayContainer {
  position: fixed;
  inset: 0;
  overflow: hidden;
  pointer-events: none;
  z-index: -1; // Ensure it's a background, can be overridden by className prop if needed
  // background-color: #030712; // Optional: very dark base for the aurora to blend with
  // Consider removing the global theme mix-blend-mode if aurora has its own blending or opacity.
  // Or, keep it if the aurora layers should also screen/multiply. For now, let's assume layers manage their own appearance.
}

/* Removed old .lightRay, .rayN, and @keyframes floatN styles */

.auroraLayer {
  position: absolute;
  inset: -100%; // Layers are much larger than viewport for movement
  background-size: 100% 100%; // Gradient covers the entire large layer
  mix-blend-mode: screen; // 'screen' or 'lighten' can work well for aurora on dark backgrounds
  // opacity is handled by auroraFade animation
}

.auroraLayer1 {
  background-image: linear-gradient(
    -45deg,
    rgba(0, 150, 255, 0.2) 0%,    /* #0096FF bright blue, slightly more visible */
    rgba(0, 150, 255, 0.05) 25%,
    transparent 50%,
    rgba(34, 197, 94, 0.05) 75%,  /* #22C55E bright green */
    rgba(34, 197, 94, 0.2) 100%
  );
  animation: 
    auroraFlow 45s ease-in-out infinite alternate, 
    auroraFade 45s ease-in-out infinite alternate;
}

.auroraLayer2 {
  background-image: linear-gradient(
    60deg,  /* Different angle */
    rgba(34, 197, 94, 0.25) 0%, /* #22C55E bright green, slightly more visible */
    rgba(34, 197, 94, 0.08) 25%,
    transparent 55%,
    rgba(0, 150, 255, 0.08) 75%,  /* #0096FF bright blue */
    rgba(0, 150, 255, 0.25) 100%
  );
  animation: 
    auroraFlow 55s ease-in-out infinite alternate-reverse, /* Different duration and direction */
    auroraFade 55s ease-in-out infinite alternate-reverse;
  animation-delay: -15s; /* Offset start time */
}

@keyframes auroraFlow {
  0% {
    transform: translateX(-20%) translateY(-20%) rotate(0deg) scale(1.2);
  }
  50% {
    transform: translateX(0%) translateY(0%) rotate(5deg) scale(1.5);
  }
  100% {
    transform: translateX(20%) translateY(20%) rotate(-5deg) scale(1.2);
  }
}

@keyframes auroraFade {
  0%, 100% {
    opacity: 0.1; /* Very subtle base */
  }
  50% {
    opacity: 0.3; /* Peak subtle visibility */
  }
}

/* 
  Original fadeIn for .rayContainer might conflict or be redundant.
  If .rayContainer itself fades in, the aurora layers will fade with it.
  If a smoother aurora-specific fade-in is desired, remove animation from .rayContainer
  and adjust auroraFade keyframes (e.g., first 0% opacity: 0).
  For now, keeping .rayContainer's original fadeIn if it exists.
*/
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

// If .rayContainer uses the fadeIn animation:
// .rayContainer {
//   ...
//   animation: fadeIn 1.5s ease-out forwards;
// }
// Then the opacities in auroraFade will be relative to the container's opacity.
// If .rayContainer does not have animation, auroraFade will control opacity from 0.1 to 0.3.
// Let's assume .rayContainer might still have its fadeIn, so the opacities in auroraFade are fine.
